---+ Adding types

Docs: https://lirias.kuleuven.be/bitstream/123456789/197561/1/shorticlp08.pdf

---++ What we want from a type declarations

  * Allow exporting types and provide visibility of types silimar to
    predicates and operators.
  * Have predicates
    - <type>(X)
    Should apply to input arguments (mode -)
    - <partial_type>(X)
    Should apply to output and mixed arguments (+,?)
  * A type hierarchy as a multiple-inheritance hierarchy.

---+++ Hindley-Milner types

  ==
  :- type list --->
	( []
	; [_|list]
	).
  :- type list(X) --->
	( []
	; [X|list]
	).
  :- type boolean --->
	( true
	; false
	).
  :- type write_option --->
	( quoted(boolean)
	; ...
	).
  ==

---++++ Type inheritance

  ==
  :- type atomic --->
	( number
	; atom
	; stream
	).
  ==






---++ We also need modes

  $ + :
  Input argument.  Satisfies the given type at entry
  $ - :
  Output argument.  Satisfies the given type at exit
  $ ? :
  Input/output argument.  Satisfies the given type at exit
  $ @ :
  Input argument.  Left unmodified.

---+ Attributed approach

Attributes:

	* name
	* type
	* instantiated
